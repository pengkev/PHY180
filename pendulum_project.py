# -*- coding: utf-8 -*-
"""Pendulum Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16TaxtfIpDPm_fM_dAmYjuI8QdCoKcEEv

# Run the following code sequentially
Don't modify anything in the "fit_black_box" block
"""

# Commented out IPython magic to ensure Python compatibility.
# 
# 
#

import fit_black_box as bb
import numpy as np

pi = 3.1415926

y = bb.np.array([55,50,31,23.2])
# q factors

x = bb.np.array([30,25,15,5
])#lengths in cm

xerr = 0.5
yerr = bb.np.array([3,2,1,0.8])

# Note that xerr and yerr can either be an array of the same length as x&y, or a single value

def linear(t,a,b):
    return a*t + b

def radical(t,a,b):
    return (t*a)**b

def qfactorl(t,a,c):
    return a/t+c

def qfactork(t,a,b,c):
    return a * 2.71828**(-b * t) + c

# Define the logarithmic decay model
def logarithmic_decay(L, a, b):
    return a * np.log(L) + b

def exponential(t,a,b,c):
    return a* 2.71828** (-t/b) +c
# This time, let's use every single possible option available to bb.plot_fit()

init_guess = (100,300,10) # guess for the best fit parameters
font_size = 20
xlabel = "Length (cm)"
ylabel = "Q factor "

# Now we make the plot, displayed on screen and saved in the directory, and print the best fit values
bb.plot_fit(exponential, x, y, xerr, yerr, init_guess=init_guess, font_size=font_size,
            xlabel=xlabel, ylabel=ylabel,title="Q factor vs Length Graph")

# Note: for sinusoidal functions, guessing the period correctly with init_guess is critical